Description: >
  Create ECS service and cluster resources for Drupal application.

Parameters:
  ElcDrupalMountPoint:
    Description: Amazon ECR repository name
    Type: String
    Default: /opt/drupal-ref-repo
  MySQLRepositoryName:
    Description: Amazon ECR repository name
    Type: String
    Default: mysql-ecr-repository
  DrupalAmiId:
    Description: Custom Drupal base AMI identifier value
    Type: String
    Default: ami-053195316a0a1b236
  ECSVolumeSize:
    Description: Volume size for container
    Type: String
    Default: 200
  DrupalRepositoryName:
    Description: Amazon ECR repository name
    Type: String
    Default: drupal-ecr-repository
  RepositoryTag:
    Description: Amazon ECR repository tag name
    Type: String
    Default: latest
  BaseDNSZoneId:
    Type: String
    Default: ''
  BaseDNSZone:
    Type: String
    Default: feature.elco.cloud
  Subdomain:
    Description: Subdomain prefix value for URL
    Type: String
    Default: e.clinique.na.ca.ncsapreprod.abcd
  SharedResourceStack:
    Description: Name of an active CloudFormation stack that contains the shared solution resources, such as the VPC.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: CFN-POC-Shared-Services
  InstanceType:
    Type: String
    Default: t2.xlarge
  KeyName:
    Description: Name of the private key for EC2 access via SSH
    Type: String
    Default: key-elco-drupal

Resources:
  
  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join ['.', [!Ref Subdomain, !Ref BaseDNSZone]]
      ValidationMethod: DNS
      DomainValidationOptions:
       - DomainName: !Join ['.', [!Ref Subdomain, !Ref BaseDNSZone]]
         HostedZoneId: !Ref BaseDNSZoneId

  LoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref MyCertificate

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${SharedResourceStack}:VPC"
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-499
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
          - "*"
      ListenerArn: !Ref LoadBalancerListenerHTTP
      Priority: 1

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess

  Service:
    DependsOn: ListenerRule
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ECSServiceRole
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref DrupalRepositoryName
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref DrupalRepositoryName
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DrupalRepositoryName}"
          Essential: true
          Memory: 4096
          MountPoints:
            - SourceVolume: drupal-repo
              ContainerPath: /opt/drupal-ref-repo
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: drupal
          Links:
            - "mysql"
            - "memcached"
          Environment:    
            - Name: MYSQL_ROOT_PASSWORD              
              Value: root_password
            - Name: MYSQL_DATABASE
              Value: drupal       
            - Name: MYSQL_USER
              Value: drupal_user
            - Name: MYSQL_PASSWORD
              Value: drupal_password
            - Name: ELC_DRUPAL_MOUNT
              Value: !Ref ElcDrupalMountPoint
        - Name: mysql
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MySQLRepositoryName}"
          Essential: true
          Memory: 8192
          MountPoints:
            - SourceVolume: drupal-db
              ContainerPath: /var/lib/mysql
          PortMappings:
            - ContainerPort: 3306
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: mysql
          Environment:
            - Name: MYSQL_ROOT_PASSWORD
              Value: root_password    
            - Name: MYSQL_DATABASE              
              Value: drupal
            - Name: MYSQL_USER
              Value: drupal_user
            - Name: MYSQL_PASSWORD
              Value: drupal_password
            - Name: FORCE_MYSQL_USER_CREATE
              Value: "true"
        - Name: memcached
          Image: memcached
          Essential: true
          Memory: 2048
          PortMappings:
            - ContainerPort: 11211
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: memcached
      Volumes:
        - 
          Host: 
            SourcePath: "/opt/drupal-ref-repo"
          Name: drupal-repo
        -
          Host:
            SourcePath: "/var/lib/mysql"
          Name: drupal-db

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  SecurityGroupALB:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-alb
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
      VpcId:
        Fn::ImportValue:
          !Sub "${SharedResourceStack}:VPC"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-alb
      Subnets:
        Fn::Split:
        - ","
        - Fn::ImportValue:
            !Sub "${SharedResourceStack}:PublicSubnets"
      SecurityGroups:
        - !Ref SecurityGroupALB
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ec2.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  SecurityGroupCluster:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-hosts
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SecurityGroupALB
          IpProtocol: -1
      VpcId:
        Fn::ImportValue:
          !Sub "${SharedResourceStack}:VPC"

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${SharedResourceStack}:PrivateSubnets"
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 0
      MaxSize: 4
      DesiredCapacity: 1
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName} - ECS Host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
                command: !Sub echo ECS_CLUSTER=${Cluster} > /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AssociatePublicIpAddress: false
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: !Ref ECSVolumeSize
      ImageId: !Ref DrupalAmiId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref SecurityGroupCluster
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap git
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
          curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py
          /usr/local/bin/pip install awscli

  CustomDNSName:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub ${BaseDNSZone}.
      Comment: Zone apex alias targeted to myELB LoadBalancer.
      RecordSets:
      - Name: !Sub ${Subdomain}.${BaseDNSZone}.
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'LoadBalancer.DNSName'

Outputs:
  ClusterName:
      Value: !Ref Cluster
  ServiceUrl:
    Description: URL of the load balancer for the sample service.
    Value: !Sub http://${LoadBalancer.DNSName}
  SecurityGroupALB:
    Value: !Ref SecurityGroupALB
  SecurityGroupCluster:
    Value: !Ref SecurityGroupCluster
  LoadBalancerArn:
    Value: !Ref LoadBalancer
